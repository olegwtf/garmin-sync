#!/usr/bin/env perl

use strict;
use warnings;
use JSON::PP;
use LWP::UserAgent;
use File::Path 'mkpath';
use File::Basename;
use Term::ReadKey;

use constant APP_DIR => $ENV{HOME}.'/.config/garmin-sync';

mkpath APP_DIR or die $! unless -e APP_DIR;
my $cfg;
if (-e APP_DIR.'/garmin-sync.json') {
    $cfg = do {
        local $/;
        open my $fh, APP_DIR.'/garmin-sync.json';
        <$fh>;
    };
    
    $cfg = eval { decode_json($cfg) };
}

$cfg ||= {};

my $ua = LWP::UserAgent->new(
    agent      => 'Mozilla/5.0 (X11; Linux x86_64) Chrome/66.0.3359.117',
    timeout    => 15,
    cookie_jar => {},
    parse_head => 0,
);

unless ( $cfg->{client_id} && $cfg->{client_secret} && $cfg->{refresh_token} && $cfg->{path} ) {
    local $| = 1;
    print "Configure garmin-sync before first run\n";
    print "Enter your strava API client ID: ";
    chomp($cfg->{client_id} = <>);
    
    Term::ReadKey::ReadMode('noecho');
    print "Enter your strava API client secret (will not echo): ";
    chomp($cfg->{client_secret} = <>);
    Term::ReadKey::ReadMode('restore');
    
    print "\nEnter your strava API refresh_token with activity:write permission (https://yizeng.me/2017/01/11/get-a-strava-api-access-token-with-write-permission/): ";
    chomp($cfg->{refresh_token} = <>);

    print "Checking credentials...\n";
    refresh_token($ua, $cfg);
    print "OK\n";

    my %mtime;
    while (1) {
        print "Enter path to directory with garmin activities: ";
        chomp(my $directory = <>);
        unless (-d $directory) {
            die "directory should exists, did you connect your Garmin device?\n";
        }

        my $last_mtime = 0;
        my $activities = get_activities([$directory]);
        if (@{$activities->{$directory}}) {
            print "Last activity uploaded to garmin connect [".basename( $activities->{$directory}[0]{f} )."]: ";
            chomp(my $last_file = <>);
            $last_file ||= basename( $activities->{$directory}[0]{f} );

            for my $activity (@{$activities->{$directory}}) {
                if ($last_file eq basename( $activity->{f} )) {
                    $last_mtime = $activity->{m};
                    last;
                }
            }

            die "No such activity file: $last_file\n" unless $last_mtime;
        }

        $mtime{$directory} = $last_mtime;
        push @{$cfg->{path}}, $directory;

        print "Want to add one more directory? (y/n):\n";
        chomp(my $yesno = <>);
        last unless $yesno eq 'y';
    }
    
    open my $fh, '>', APP_DIR.'/last_uploaded_mtime.json' or die $!;
    print $fh encode_json(\%mtime);
    close $fh;
    
    save_config($cfg);
    chmod 0600, APP_DIR.'/garmin-sync.json';
}

my $last_mtime = decode_json(do {
    open my $fh, APP_DIR.'/last_uploaded_mtime.json';
    <$fh> || '{}';
});

my $activities = get_activities($cfg->{path}, $last_mtime);

if (%$activities) {
    while (my ($dir, $activities) = each %$activities) {
        for my $activity (@$activities) {
            if (eval { upload($ua, $activity->{f}, $cfg) }) {
                if (!$last_mtime->{$dir} || $activity->{m} > $last_mtime->{$dir}) {
                    $last_mtime->{$dir} = $activity->{m};
                }

                do_log("Successfully synced " . $activity->{f});
                notify('face-smile', "Successfully synced " . basename($activity->{f}));
            }
            else {
                my $error = $@;
                do_log("Can't sync " . $activity->{f} . ": $error");
                notify(0, "Can't sync " . basename($activity->{f}), $error);
            }
        }
    }
    
    open my $fh, '>', APP_DIR.'/last_uploaded_mtime.json' or die $!;
    print $fh encode_json($last_mtime);
    close $fh;
}
else {
    notify('face-confused', 'No new activities to sync');
}

sub get_activities {
    my ($dir_list, $last_mtime) = @_;
    
    my %activities;
    
    for my $dir (@$dir_list) {
        opendir my $dh, $dir or next;
        while (my $f = readdir $dh) {
            if ($f ne '.' && $f ne '..' && -f "$dir/$f") {
                $f = "$dir/$f";
                my $mtime = (stat $f)[9];

                if ($last_mtime && ($last_mtime->{$dir} || 0) >= $mtime) {
                    next;
                }

                push @{$activities{$dir}}, { 'f' => $f, 'm' => $mtime };
            }
        }

        @{$activities{$dir}} = sort { $b->{m} <=> $a->{m} } @{$activities{$dir}} if $activities{$dir};
    }
    

    
    return \%activities;
}

sub refresh_token {
    my ($ua, $cfg) = @_;

    my $resp = $ua->post(
        'https://www.strava.com/api/v3/oauth/token',
        Content => {
            client_id     => $cfg->{client_id},
            client_secret => $cfg->{client_secret},
            grant_type    => 'refresh_token',
            refresh_token => $cfg->{refresh_token}
        }
    );

    $resp->is_success or die $resp->status_line, "\n", $resp->decoded_content, "\n";

    my $res = decode_json( $resp->decoded_content );
    $res->{access_token} && $res->{expires_at} && $res->{refresh_token}
        or die 'Invalid response: ', $resp->decoded_content;

    @$cfg{qw/ access_token expires_at refresh_token /} = @$res{qw/ access_token expires_at refresh_token /};
}

sub save_config {
    my ( $cfg ) = @_;

    open my $fh, '>', APP_DIR.'/garmin-sync.json' or die $!;
    print $fh encode_json($cfg);
    close $fh;
}

sub upload {
    my ($ua, $file, $cfg) = @_;
    
    my ($ext) = $file =~ /\.([^.]+)$/;

    if ( time - $cfg->{expires_at} < 3 * 60 ) {
        refresh_token($ua, $cfg);
        save_config($cfg);
    }

    my $resp = $ua->post('https://www.strava.com/api/v3/uploads',
        Content_Type => 'form-data',
        Content      => [
            file        => [$file],
            name        => '',
            description => '',
            trainer     => '',
            commute     => '',
            data_type   => $ext,
            external_id => '',
        ],
        Authorization => "Bearer $cfg->{access_token}"
    );
    
    $resp->is_success or die $resp->status_line, "\n", $resp->decoded_content, "\n";
}

sub do_log {
    open my $fh, '>>', APP_DIR . '/sync.log' or die $!;
    print $fh '[', scalar(localtime), '] ', $_[0], "\n";
    close $fh;
}

sub notify {
    my ($success, $summary, $body) = @_;
    system 'notify-send', '-i', $success ? $success : 'face-angry', (!$success ? ('-t', 1000*60*60) : ()), $summary, $body||'';
}
